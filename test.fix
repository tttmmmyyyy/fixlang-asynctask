module Test;

import AsyncTask;

fib_async : I64 -> I64;
fib_async = |n| (
    if n <= 1 {
        let _ = AsyncTask::make(|_| n + 1); // A task which is not waited.
        AsyncTask::make(|_| n).get // A task which is waited soon.
    } else {
        let minus_one_task = AsyncTask::make(|_| n-1); // A task which is captured by another task.
        let minus_two_task = AsyncTask::make(|_| minus_one_task.get - 1); // A task which is captured by another task.
        let minus_three_task = AsyncTask::make(|_| minus_two_task.get - 1); // A task which is captured by another task but not waited.
        let one_task = AsyncTask::make(|_| let _ = minus_three_task; fib_async(minus_one_task.get));
        let two_task = AsyncTask::make(|_| let _ = minus_three_task; fib_async(minus_two_task.get));
        one_task.get + two_task.get
    }
);

test_async_fib : IO ();
test_async_fib = (
    eval *assert_eq(|_|"test fib_async failed!", fib_async(10), 55);
    pure()
);

test_async_shared_array : IO ();
test_async_shared_array = (
    let n = 100000;
    let arr = Iterator::range(0, n).to_array;
    let sum_task_0 = AsyncTask::make(|_| arr.to_iter.fold(0, Add::add));
    let sum_task_1 = AsyncTask::make(|_| arr.to_iter.reverse.fold(0, Add::add));
    let sum_task_2 = AsyncTask::make(|_| (
        loop((0, 0), |(i, sum)| 
            if i == arr.get_size { 
                break $ sum
            } else {
                continue $ (i + 1, sum + arr.@(i))
            }
        )
    ));
    let sum_task_3 = AsyncTask::make(|_| (
        let half = arr.get_size / 2;
        let sum = loop((0, 0), |(i, sum)| 
            if i == half { 
                break $ sum
            } else {
                continue $ (i + 1, sum + arr.@(i))
            }
        );
        let arr = loop((arr, 0), |(arr, i)| (
            if i == 1000 { 
                break $ arr
            } else {
                let arr = arr.push_back(i).push_back(-i);
                continue $ (arr, i + 1)
            }
        ));
        loop((half, sum), |(i, sum)| 
            if i == arr.get_size { 
                break $ sum
            } else {
                continue $ (i + 1, sum + arr.@(i))
            }
        )
    ));
    let sum_task_4 = loop((0, 0), |(i, sum)| (
        if i == arr.get_size { break $ sum };
        continue $ (i + 1, sum + arr.@(i))
    ));
    let ans = n * (n - 1) / 2;
    eval *assert_eq(|_|"test_async_shared_array failed!", sum_task_0.get, ans);
    eval *assert_eq(|_|"test_async_shared_array failed!", sum_task_1.get, ans);
    eval *assert_eq(|_|"test_async_shared_array failed!", sum_task_2.get, ans);
    eval *assert_eq(|_|"test_async_shared_array failed!", sum_task_3.get, ans);
    eval *assert_eq(|_|"test_async_shared_array failed!", sum_task_4, ans);
    pure()
);

test_async_shared_array_2 : IO ();
test_async_shared_array_2 = (
    let sum_range = |from, to| (
        loop((0, from), |(sum, i)| (
            if i == to { break $ sum };
            continue $ (sum + i, i + 1)
        ))
    );
    let n = 10000000;
    // Compute the sum of numbers from 0 to n/2 - 1.
    // This task will be executed asynchronously (if you are using multi-core CPU).
    let sum_former = AsyncTask::make(|_| sum_range(0, n/2));
    // Compute the sum of numbers from n/2 to n.
    // We perfom this in the current thread while waiting for the result of the former task.
    let sum_latter = sum_range(n/2, n);
    // Sum up the results of the two computations.
    let sum = sum_former.get + sum_latter;
    // Then the sum should be n * (n - 1) / 2.
    eval *assert_eq(|_|"test_async_shared_array_2 failed!", sum, n * (n - 1) / 2);
    
    pure()
);

test_async_task_array_result : IO ();
test_async_task_array_result = (
    let n = 1000000;
    let task_0 = AsyncTask::make(|_| Iterator::range(0, n).to_array);
    let task_1 = AsyncTask::make(|_| Iterator::range(n, 2*n).to_array);
    let task_2 = AsyncTask::make(|_| Iterator::range(0, 2*n).to_array);
    eval *assert_eq(|_|"test_async_task_array_result failed!", task_0.get.append(task_1.get), task_2.get);
    pure()
);

test_mvar : IO ();
test_mvar = (
    let logger = *Var::make([]);

    // Launch multiple threads, and log in which order each thread is executed.
    let num_threads = number_of_processors * 2;
    eval *Iterator::range(0, num_threads).fold_m((), |_, i| (
        eval *AsyncIOTask::make(
            logger.lock(|logs| (
                logger.set(logs.push_back(i))
            ))
        ).forget;
        pure()
    ));

    // Wait until all threads are finished.
    eval *logger.wait(|logs| logs.get_size == num_threads);

    let logs = *logger.get;
    let logs = logs.sort_by(|(a, b)| a < b);
    eval *assert_eq(|_|"test_mvar failed!", logs, Iterator::range(0, num_threads).to_array);
    pure()
);

test_mvar_of_shared_object : IO ();
test_mvar_of_shared_object = (
    let n = 100000;
    let var = *Var::make([]);
    let th0 = *AsyncIOTask::make((
        eval *pure(); // This line makes the `arr` is created on `th0` and not in the main thread.
        let arr = Iterator::range(0, n).to_array;
        eval *var.Var::set(arr);
        // NOTE: we need `Var::` in the above line, because:
        // - When the compiler try to infer namespace of `set`, it knows that it has type `set : a -> Var (Array b) -> c`.
        // - `Array::set` has type `I64 -> d -> Array d -> Array d`, which is unifiable to `a -> Var (Array b) -> c` 
        //   by `a = I64`, `d = Var (Array b)` and `c = Array d -> Array d`.
        pure $ arr.to_iter.fold(0, Add::add)
    ));
    let th1 = *AsyncIOTask::make((
        let arr = *var.wait_and_lock(|arr| !arr.is_empty, |arr| pure $ arr);
        pure $ arr.to_iter.fold(0, Add::add)
    ));
    eval *assert_eq(|_|"test_mvar_of_shared_object failed!", th0.get, n * (n - 1) / 2);
    eval *assert_eq(|_|"test_mvar_of_shared_object failed!", th1.get, n * (n - 1) / 2);
    pure()
);

// Regression test for https://github.com/tttmmmyyyy/fixlang/issues/14
regression_issue_14: IO ();
regression_issue_14 = (
    let _ = *(eprintln ("started"));
    let str = "abc";
    let buf = Array::fill(256, 0_U8);
    let res = str.borrow_c_str(|p_str|
        buf.borrow_ptr(|p_ret|
            0_I32
        )
    );
    pure()
);

test : IO ();
test = (
    eval *test_async_fib;
    eval *test_async_shared_array;
    eval *test_async_shared_array_2;
    eval *test_async_task_array_result;
    eval *test_mvar;
    eval *test_mvar_of_shared_object;
    eval *regression_issue_14;
    pure()
);